{"version":3,"file":"extension.js","mappings":"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","sources":["../.././src/sort-lines.ts","../../external commonjs \"vscode\"","../../webpack/bootstrap","../.././src/extension.ts"],"sourcesContent":["import * as vscode from 'vscode';\n\ntype ArrayTransformer = (lines: string[]) => string[];\ntype SortingAlgorithm = (a: string, b: string) => number;\n\nfunction makeSorter(algorithm?: SortingAlgorithm): ArrayTransformer {\n  return function(lines: string[]): string[] {\n    return lines.sort(algorithm);\n  };\n}\n\nfunction sortActiveSelection(transformers: ArrayTransformer[]): Thenable<boolean> | undefined {\n  const textEditor = vscode.window.activeTextEditor;\n  if (!textEditor) {\n    return undefined;\n  }\n  const selection = textEditor.selection;\n\n  if (selection.isEmpty && vscode.workspace.getConfiguration('sortLines').get('sortEntireFile') === true) {\n    return sortLines(textEditor, 0, textEditor.document.lineCount - 1, transformers);\n  }\n\n  if (selection.isSingleLine) {\n    return undefined;\n  }\n\n  let endLine = selection.end.line;\n\n  // Ignore unselected last line\n  if (selection.end.character === 0 && vscode.workspace.getConfiguration('sortLines').get('ignoreUnselectedLastLine') === true) {\n    endLine -= 1;\n  }\n  return sortLines(textEditor, selection.start.line, endLine, transformers);\n}\n\nfunction sortLines(textEditor: vscode.TextEditor, startLine: number, endLine: number, transformers: ArrayTransformer[]): Thenable<boolean> {\n  let lines: string[] = [];\n  for (let i = startLine; i <= endLine; i++) {\n    lines.push(textEditor.document.lineAt(i).text);\n  }\n\n  // Remove blank lines in selection\n  if (vscode.workspace.getConfiguration('sortLines').get('filterBlankLines') === true) {\n    removeBlanks(lines);\n  }\n\n  lines = transformers.reduce((currentLines, transform) => transform(currentLines), lines);\n\n  return textEditor.edit(editBuilder => {\n    const range = new vscode.Range(startLine, 0, endLine, textEditor.document.lineAt(endLine).text.length);\n    editBuilder.replace(range, lines.join('\\n'));\n  });\n}\n\nfunction removeDuplicates(lines: string[]): string[] {\n  return Array.from(new Set(lines));\n}\n\nfunction keepOnlyDuplicates(lines: string[]): string[] {\n  return Array.from(new Set(lines.filter((element, index, array) => array.indexOf(element) !== index)));\n}\n\nfunction keepOnlyNotDuplicates(lines: string[]): string[] {\n  return Array.from(new Set(lines.filter((element, index, array) => (array.lastIndexOf(element) === array.indexOf(element)))));\n}\n\nfunction removeBlanks(lines: string[]): void {\n  for (let i = 0; i < lines.length; ++i) {\n    if (lines[i].trim() === '') {\n      lines.splice(i, 1);\n      i--;\n    }\n  }\n}\n\nfunction reverseCompare(a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  }\n  return a < b ? 1 : -1;\n}\n\nfunction caseInsensitiveCompare(a: string, b: string): number {\n  return a.localeCompare(b, undefined, {sensitivity: 'base'});\n}\n\nfunction lineLengthCompare(a: string, b: string): number {\n  // Use Array.from so that multi-char characters count as 1 each\n  const aLength = Array.from(a).length;\n  const bLength = Array.from(b).length;\n  if (aLength === bLength) {\n    return 0;\n  }\n  return aLength > bLength ? 1 : -1;\n}\n\nfunction lineLengthReverseCompare(a: string, b: string): number {\n  return lineLengthCompare(a, b) * -1;\n}\n\nfunction variableLengthCompare(a: string, b: string): number {\n  return lineLengthCompare(getVariableCharacters(a), getVariableCharacters(b));\n}\n\nfunction variableLengthReverseCompare(a: string, b: string): number {\n  return variableLengthCompare(a, b) * -1;\n}\n\nlet intlCollator: Intl.Collator;\nfunction naturalCompare(a: string, b: string): number {\n  if (!intlCollator) {\n    intlCollator = new Intl.Collator(undefined, {numeric: true});\n  }\n  return intlCollator.compare(a, b);\n}\n\nfunction getVariableCharacters(line: string): string {\n  const match = line.match(/(.*)=/);\n  if (!match) {\n    return line;\n  }\n  const last = match.pop();\n  if (!last) {\n    return line;\n  }\n  return last;\n}\n\nfunction shuffleSorter(lines: string[]): string[] {\n    for (let i = lines.length - 1; i > 0; i--) {\n        const rand = Math.floor(Math.random() * (i + 1));\n        [lines[i], lines[rand]] = [lines[rand], lines[i]];\n    }\n    return lines;\n}\n\nconst transformerSequences = {\n  sortNormal: [makeSorter()],\n  sortUnique: [makeSorter(), removeDuplicates],\n  sortReverse: [makeSorter(reverseCompare)],\n  sortCaseInsensitive: [makeSorter(caseInsensitiveCompare)],\n  sortCaseInsensitiveUnique: [makeSorter(caseInsensitiveCompare), removeDuplicates],\n  sortLineLength: [makeSorter(lineLengthCompare)],\n  sortLineLengthReverse: [makeSorter(lineLengthReverseCompare)],\n  sortVariableLength: [makeSorter(variableLengthCompare)],\n  sortVariableLengthReverse: [makeSorter(variableLengthReverseCompare)],\n  sortNatural: [makeSorter(naturalCompare)],\n  sortShuffle: [shuffleSorter],\n  removeDuplicateLines: [removeDuplicates],\n  keepOnlyDuplicateLines: [keepOnlyDuplicates],\n  keepOnlyNotDuplicateLines: [keepOnlyNotDuplicates]\n};\n\nexport const sortNormal = () => sortActiveSelection(transformerSequences.sortNormal);\nexport const sortUnique = () => sortActiveSelection(transformerSequences.sortUnique);\nexport const sortReverse = () => sortActiveSelection(transformerSequences.sortReverse);\nexport const sortCaseInsensitive = () => sortActiveSelection(transformerSequences.sortCaseInsensitive);\nexport const sortCaseInsensitiveUnique = () => sortActiveSelection(transformerSequences.sortCaseInsensitiveUnique);\nexport const sortLineLength = () => sortActiveSelection(transformerSequences.sortLineLength);\nexport const sortLineLengthReverse = () => sortActiveSelection(transformerSequences.sortLineLengthReverse);\nexport const sortVariableLength = () => sortActiveSelection(transformerSequences.sortVariableLength);\nexport const sortVariableLengthReverse = () => sortActiveSelection(transformerSequences.sortVariableLengthReverse);\nexport const sortNatural = () => sortActiveSelection(transformerSequences.sortNatural);\nexport const sortShuffle = () => sortActiveSelection(transformerSequences.sortShuffle);\nexport const removeDuplicateLines = () => sortActiveSelection(transformerSequences.removeDuplicateLines);\nexport const keepOnlyDuplicateLines = () => sortActiveSelection(transformerSequences.keepOnlyDuplicateLines);\nexport const keepOnlyNotDuplicateLines = () => sortActiveSelection(transformerSequences.keepOnlyNotDuplicateLines);\n","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport * as sortLines from './sort-lines';\n\nexport function activate(context: vscode.ExtensionContext): void {\n  const commands = [\n    vscode.commands.registerCommand('sortLines.sortLines', sortLines.sortNormal),\n    vscode.commands.registerCommand('sortLines.sortLinesReverse', sortLines.sortReverse),\n    vscode.commands.registerCommand('sortLines.sortLinesCaseInsensitive', sortLines.sortCaseInsensitive),\n    vscode.commands.registerCommand('sortLines.sortLinesCaseInsensitiveUnique', sortLines.sortCaseInsensitiveUnique),\n    vscode.commands.registerCommand('sortLines.sortLinesLineLength', sortLines.sortLineLength),\n    vscode.commands.registerCommand('sortLines.sortLinesLineLengthReverse', sortLines.sortLineLengthReverse),\n    vscode.commands.registerCommand('sortLines.sortLinesVariableLength', sortLines.sortVariableLength),\n    vscode.commands.registerCommand('sortLines.sortLinesVariableLengthReverse', sortLines.sortVariableLengthReverse),\n    vscode.commands.registerCommand('sortLines.sortLinesNatural', sortLines.sortNatural),\n    vscode.commands.registerCommand('sortLines.sortLinesUnique', sortLines.sortUnique),\n    vscode.commands.registerCommand('sortLines.sortLinesShuffle', sortLines.sortShuffle),\n    vscode.commands.registerCommand('sortLines.removeDuplicateLines', sortLines.removeDuplicateLines),\n    vscode.commands.registerCommand('sortLines.keepOnlyDuplicateLines', sortLines.keepOnlyDuplicateLines),\n    vscode.commands.registerCommand('sortLines.keepOnlyNotDuplicateLines', sortLines.keepOnlyNotDuplicateLines)\n  ];\n\n  commands.forEach(command => context.subscriptions.push(command));\n}\n"],"names":["makeSorter","algorithm","lines","sort","sortActiveSelection","transformers","textEditor","vscode","window","activeTextEditor","selection","isEmpty","workspace","getConfiguration","get","sortLines","document","lineCount","isSingleLine","endLine","end","line","character","start","startLine","i","push","lineAt","text","length","trim","splice","removeBlanks","reduce","currentLines","transform","edit","editBuilder","range","Range","replace","join","removeDuplicates","Array","from","Set","caseInsensitiveCompare","a","b","localeCompare","undefined","sensitivity","lineLengthCompare","aLength","bLength","variableLengthCompare","getVariableCharacters","intlCollator","match","pop","transformerSequences","sortNormal","sortUnique","sortReverse","sortCaseInsensitive","sortCaseInsensitiveUnique","sortLineLength","sortLineLengthReverse","sortVariableLength","sortVariableLengthReverse","sortNatural","Intl","Collator","numeric","compare","sortShuffle","rand","Math","floor","random","removeDuplicateLines","keepOnlyDuplicateLines","filter","element","index","array","indexOf","keepOnlyNotDuplicateLines","lastIndexOf","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","commands","registerCommand","forEach","command","subscriptions"],"sourceRoot":""}